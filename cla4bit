module CLA4Bit(A, B, CI, S, CO); 

input [3:0] A, B; 
input CI; 
output [3:0] S; 
output CO;

parameter n_bits=3; 
genvar i;
logic C0;
logic [3:0]G,P;
logic [4:1]C;

assign C0=CI;

generate
for(i = 0; i <= n_bits ; i = i + 1)
	begin
	assign G[i]=A[i]&B[i];
	assign P[i]=A[i]^B[i];	
	end
endgenerate

generate
for(i = 0; i <= n_bits ; i = i + 1)
begin
	if(i==0)
		begin
		assign C[i+1'b1]=G[i]|P[i]&C0; 
		assign S[i]=P[i]^C0;
		end
	else
		begin
		assign C[i+1'b1]=G[i]|P[i]&C[i]; 
		assign S[i]=P[i]^C[i];
		end
end
endgenerate

assign CO=C[4];

endmodule 
