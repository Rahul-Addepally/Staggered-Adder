module top;

logic Clock=0; 
logic [15:0] A, B; 
logic CI; 
logic [15:0] S; 
logic CO; 
int i;
bit Errors;
logic [16:0]Expected_Output;
logic [32:0]E_O1,E_O; //Expected output ,Expected output 1

parameter period=5;

always #period Clock=~Clock;

StaggeredAdd StaggeredAdd_instance(Clock, A, B, CI, S, CO); 

always @(posedge Clock)
	begin
	E_O <= {A,B,CI};
	E_O1<= E_O;
	assign Expected_Output=E_O1[32:17]+E_O1[16:1]+E_O1[0];
	end

initial
	begin
	@(posedge Clock)
	forever @(posedge Clock)
	if ({CO,S} !== Expected_Output)
		begin
		$display("*** Error: time: %t, A = %b, B = %b, CI = %b, Output = %b, Expected_Output = %b", $time, E_O1[32:17], E_O1[16:1], E_O1[0], {CI,S}, Expected_Output);
		Errors = '1;
		end
	end
	
initial
	begin
	repeat(10) 
	Stimulus($random,$random,$urandom_range(0,1));	
	Stimulus(65535,65535,1);	
	Stimulus(0,0,1);
	Stimulus(48767,31238,1);
	
	if (Errors)
		$display("***SOME CASES ARE FAILED ***");
	else
		$display("*** SUCCESS ALL CASES ARE PASSED ***");
	
	repeat(3) @(posedge Clock);
	$finish;
	end
	
task Stimulus(input [15:0] A_temp, input [15:0] B_temp, input CI_temp);
	@(negedge Clock); 
	A=A_temp; B=B_temp; CI=CI_temp;
endtask

endmodule
